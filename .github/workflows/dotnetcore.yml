name: .NET Core

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  MAJOR_MINOR_BUILD_VERSION: '6.8.0'

jobs:
  build:

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '3.1.x'

    - name: Output Run ID
      run: echo ${{ github.run_id }}
    - name: Output Run Number
      run: echo ${{ github.run_number }}
    - name: show full version number
      run: echo ${{ env.MAJOR_MINOR_BUILD_VERSION }}.${{ github.run_number }}

    - name: Update project version
      uses: roryprimrose/set-vs-sdk-project-version@v1.0.3
      with:
        dotnet-version: ${{ env.MAJOR_MINOR_BUILD_VERSION }}.${{ github.run_number }}
        version: ${{ env.MAJOR_MINOR_BUILD_VERSION }}.${{ github.run_number }}
        assemblyVersion: ${{ env.MAJOR_MINOR_BUILD_VERSION }}.${{ github.run_number }}
        fileVersion: ${{ env.MAJOR_MINOR_BUILD_VERSION }}.${{ github.run_number }}
        informationalVersion: ${{ env.MAJOR_MINOR_BUILD_VERSION }}.${{ github.run_number }}

    - name: Install dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --configuration Release --no-restore
    - name: Test
      run: dotnet test --no-restore --verbosity normal
    - name: Create nupkg
      run: dotnet pack --configuration Release src\ElasticSearch.Extensions.Logging\AM.Extensions.Logging.ElasticSearch.csproj
    - name: Upload nupkg
      uses: actions/upload-artifact@v2
      with:
        name: nupkg
        path: '**/AM.Extensions.Logging.ElasticSearch.*.nupkg'
    - name: Create Release
#      if: github.ref == 'refs/heads/master'
      id: create_release
      uses: actions/create-release@latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ env.MAJOR_MINOR_BUILD_VERSION }}.${{ github.run_number }}
        release_name: ${{ env.MAJOR_MINOR_BUILD_VERSION }}.${{ github.run_number }}
        draft: true
        prerelease: true
    - name: Upload
      uses: actions/github-script@v3
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          console.log('environment', process.versions);
          const path = require('path');
          const fs = require('fs');
          const release_id = '${{ needs.create_release.outputs.id }}';
          for (let file of await fs.readdirSync('./')) {
            if (path.extname(file) === '.nupkg') {
              console.log('uploadReleaseAsset', file);
              await github.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release_id,
                name: file,
                data: await fs.readFileSync(`./${file}`)
              });
            }
          }
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: '**/AM.Extensions.Logging.ElasticSearch.*.nupkg'
        asset_name: nupkg
        asset_content_type: application/zip